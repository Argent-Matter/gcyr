plugins {
    alias(libs.plugins.shadow)
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def mod_id = getConfig("mod_id")
def common_project = project(":${mod_id}-common")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = common_project.file("src/main/resources/${mod_id}.accesswidener")

    runs {
        create("dataCommon") {
            inherit client
            name("Minecraft Data")
            property("fabric-api.datagen")
            property("fabric-api.datagen.modid", "${mod_id}")
            property("fabric-api.datagen.output-dir", project.file("src/generated/resources").absolutePath)
            property("fabric-api.datagen.strict-validation")
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("**/.cache")
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    mavenLocal()
    // mavens for Fabric-exclusives
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Jade
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    //maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    maven { url = "https://maven.saps.dev/minecraft" } // saps.dev Maven (KubeJS and Rhino)
}

dependencies {
    modImplementation fabric.fabricLoader
    modImplementation fabric.fabricApi

    common(project(path: ":${mod_id}-common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":${mod_id}-common", configuration: "transformProductionFabric")) { transitive = false }

    // LDLib
    modImplementation(fabric.gtceu.fabric) { transitive = false }
    modImplementation(fabric.ldlib.fabric) { transitive = false }

    // Registrate
    modImplementation("com.tterrag.registrate_fabric:Registrate:${fabric.versions.registrate.get()}")

    // REI
    modCompileOnly(fabric.rei.plugin) { transitive = false }
    modCompileOnly(fabric.rei.api) { transitive = false }
    modImplementation(fabric.rei.fabric)

    // TOP
    modCompileOnly fabric.theoneprobe

    // KJS
    modImplementation fabric.kubejs.fabric

    // Configuration
    modImplementation(fabric.configuration)

    // Mixin Extras
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0")))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":${mod_id}-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}